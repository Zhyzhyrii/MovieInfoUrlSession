//
//  DetailMovieViewController.swift
//  MovieInfoUrlSession
//
//  Created by Игорь on 10/13/19.
//  Copyright (c) 2019 Igor Zhyzhyrii. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import WebKit

protocol DetailMovieDisplayLogic: class {
    func displayTextDetails(viewModel: DetailMovieModels.ShowDetails.ViewModel)
}

class DetailMovieViewController: UIViewController {
    
    @IBOutlet var trailerPlayer: WKWebView!
    @IBOutlet var titleLabel: UILabel!
    @IBOutlet var releaseGenreLabel: UILabel!
    @IBOutlet var runTimeLabel: UILabel!
    @IBOutlet var addtoFavoriteButton: UIButton!
    @IBOutlet var watchLaterButton: UIButton!
    @IBOutlet var overviewReviewSegmentedControl: UISegmentedControl!
    @IBOutlet var overviewReviewTextView: UITextView!
    @IBOutlet var voteAverageLabel: UILabel!
    
    var movieId: Int!
    var interactor: DetailMovieBusinessLogic?
    var router: (NSObjectProtocol & DetailMovieRoutingLogic & DetailMovieDataPassing)?
    
    private var detailMovie: DetailMovie!
    private var reviews: String!
    
    // MARK: Object lifecycle
    
    //initiate before starting lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        showDetails()
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    @IBAction func addToFavoritePressed() {
        if ListManager.listManager.isPresent(movie: detailMovie, in: .favoriteList) {
            addtoFavoriteButton.setImage(UIImage(named: "heart"), for: .normal)
            addtoFavoriteButton.setTitle(" Добавить в избранное", for: .normal)
            detailMovie.isAddedToFavorite = false
            ListManager.listManager.remove(movie: detailMovie, from: .favoriteList)
        } else {
            addtoFavoriteButton.setImage(UIImage(named: "heartColored"), for: .normal)
            addtoFavoriteButton.setTitle(" В избранном", for: .normal)
            detailMovie.isAddedToFavorite = true
            ListManager.listManager.add(movie: detailMovie, to: .favoriteList)
        }
    }
    
    @IBAction func watchLaterPressed() {
        if ListManager.listManager.isPresent(movie: detailMovie, in: .watchLaterList) {
            watchLaterButton.setImage(UIImage(named: "bookmark"), for: .normal)
            watchLaterButton.setTitle(" Смотреть позже", for: .normal)
            detailMovie.isAddedToWatchLater = false
            ListManager.listManager.remove(movie: detailMovie, from: .watchLaterList)
        } else {
            watchLaterButton.setImage(UIImage(named: "bookmarkSelected"), for: .normal)
            watchLaterButton.setTitle(" Посмотрю позже", for: .normal)
            detailMovie.isAddedToWatchLater = true
            ListManager.listManager.add(movie: detailMovie, to: .watchLaterList)
        }
    }
    
    @IBAction func overviewReviewPressed() {
    }
    
    @IBAction func segmentedValueChanged(_ sender: UISegmentedControl) {
        if sender.selectedSegmentIndex == 0 {
            overviewReviewTextView.text = detailMovie.overview
        } else {
            overviewReviewTextView.text = reviews
        }
    }
    
    // MARK: Do something
    
    func showDetails() {
        let request = DetailMovieModels.ShowDetails.Request(detailMovieId: movieId)
        interactor?.showDetails(request: request)
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = DetailMovieInteractor()
        let presenter = DetailMoviePresenter()
        let router = DetailMovieRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func configureUI() {
        let isMoviePresenInFavorite = ListManager.listManager.isPresent(movie: detailMovie, in: .favoriteList)
        updateAddToFavoriteUISection(if: isMoviePresenInFavorite)
    }
    
    private func updateAddToFavoriteUISection(if isPresentInFavorite: Bool) {
        if !isPresentInFavorite {
            addtoFavoriteButton.setImage(UIImage(named: "heart"), for: .normal)
            addtoFavoriteButton.setTitle(" Добавить в избранное", for: .normal)
        } else {
            addtoFavoriteButton.setImage(UIImage(named: "heartColored"), for: .normal)
            addtoFavoriteButton.setTitle(" В избранном", for: .normal)
        }
    }
}

extension DetailMovieViewController: DetailMovieDisplayLogic {
    func displayTextDetails(viewModel: DetailMovieModels.ShowDetails.ViewModel) {
        DispatchQueue.main.async {
            self.titleLabel.text = viewModel.displayedDetails.movieTitle
            self.releaseGenreLabel.text = viewModel.displayedDetails.releaseGenre
            self.runTimeLabel.text = viewModel.displayedDetails.runTime
            self.voteAverageLabel.text = viewModel.displayedDetails.voteAverage
            
            guard let urlTrailer = viewModel.displayedDetails.trailerUrl else { return } //add ui message trailer is missing
            self.trailerPlayer.load(URLRequest(url: urlTrailer))
            
            self.overviewReviewTextView.text = viewModel.displayedDetails.overView
            self.reviews = viewModel.displayedDetails.reviews //todo remove after implementation use case for segmentedValueChanged
            //            guard let reviews = viewModel.displayedDetails.reviews else { return } //add ui message reviews are missing
        }
    }
}

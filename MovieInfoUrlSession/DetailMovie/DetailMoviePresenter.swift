//
//  DetailMoviePresenter.swift
//  MovieInfoUrlSession
//
//  Created by Игорь on 10/13/19.
//  Copyright (c) 2019 Igor Zhyzhyrii. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailMoviePresentationLogic {
    func presentDetails(response: DetailMovieModels.ShowDetails.Response)
    func presentTrailer(response: DetailMovieModels.ShowTrailer.Response)
    func presentFavouriteStatus(response: DetailMovieModels.SetFavouriteStatus.Response)
    func presentWatchLaterStatus(response: DetailMovieModels.SetWatchLaterStatus.Response)
    func presentOverviewReview(response: DetailMovieModels.SelectOverviewReviewsSegmentedControl.Response)
}

class DetailMoviePresenter: DetailMoviePresentationLogic {
    
    weak var viewController: DetailMovieDisplayLogic?
    
    // MARK: Do something
    
    func presentDetails(response: DetailMovieModels.ShowDetails.Response) {
        
        if let errorMessage = response.errorMessage {
            let viewModel = DetailMovieModels.ShowDetails.ViewModel(displayedDetails: nil, errorMessage: errorMessage)
            viewController?.displayMovieDetailsError(viewModel: viewModel)
        } else {
            if let detailMovie = response.detailMovie {
                let title = detailMovie.title
                
                var releaseGenre = detailMovie.releaseDate ?? ""
                if let genres = detailMovie.getGenresAsString() {
                    releaseGenre = (detailMovie.releaseDate ?? "") + ", " + genres
                }
                
                var displayedRunTime = "---"
                if let runTime = detailMovie.runTime.value {
                    displayedRunTime = "\(runTime) мин"
                }
                
                var displayedVoteAverage = "---"
                if let voteAverage = detailMovie.voteAverage.value {
                    displayedVoteAverage = "\(voteAverage)"
                }
                
                let overview = detailMovie.overview
                
                let isAddedToFavourite = response.isAddedToFavourite
                let isAddedToWatchLater = response.isAddedToWatchLater
                
                let displayedDetails = DetailMovieModels.ShowDetails.ViewModel.DisplayedDetails(movieTitle: title, releaseGenre: releaseGenre, runTime: displayedRunTime, voteAverage: displayedVoteAverage, overView: overview, isAddedToFavourite: isAddedToFavourite, isAddedToWatchLater: isAddedToWatchLater)
                
                let viewModel = DetailMovieModels.ShowDetails.ViewModel(displayedDetails: displayedDetails, errorMessage: response.errorMessage)
                viewController?.displayMovieDetails(viewModel: viewModel)
            } else {
                let viewModel = DetailMovieModels.ShowDetails.ViewModel(displayedDetails: nil, errorMessage: nil)
                viewController?.displayMovieDetailsError(viewModel: viewModel)
            }
        }
    }
    
    func presentTrailer(response: DetailMovieModels.ShowTrailer.Response) {
        
        if let errorMessage = response.errorMessage {
            let viewModel = DetailMovieModels.ShowTrailer.ViewModel(trailerUrl: nil, errorMessage: errorMessage)
            viewController?.displayTrailerError(viewModel: viewModel)
        } else {
            if let videoCode = response.videoCode {
                let trailerUrl = URL(string: "https://www.youtube.com/embed/\(videoCode)")
                let viewModel = DetailMovieModels.ShowTrailer.ViewModel(trailerUrl: trailerUrl, errorMessage: nil)
                viewController?.displayTrailer(viewModel: viewModel)
            } else {
                let viewModel = DetailMovieModels.ShowTrailer.ViewModel(trailerUrl: nil, errorMessage: nil)
                viewController?.displayTrailerError(viewModel: viewModel)
            }
        }
        
    }
    
    func presentFavouriteStatus(response: DetailMovieModels.SetFavouriteStatus.Response) {
        let viewModel = DetailMovieModels.SetFavouriteStatus.ViewModel(isAddedToFavourite: response.isAddedToFavourite)
        viewController?.displayFavouriteStatus(viewModel: viewModel)
    }
    
    func presentWatchLaterStatus(response: DetailMovieModels.SetWatchLaterStatus.Response) {
        let viewModel = DetailMovieModels.SetWatchLaterStatus.ViewModel(isAddedToWatchLater: response.isAddedToWatchLater)
        viewController?.displayWatchLaterStatus(viewModel: viewModel)
    }
    
    func presentOverviewReview(response: DetailMovieModels.SelectOverviewReviewsSegmentedControl.Response) {
        
        if response.errorMessage != nil {
            let viewModel = DetailMovieModels.SelectOverviewReviewsSegmentedControl.ViewModel(overviewReviews: nil, errorMessage: response.errorMessage)
            viewController?.displayeOverViewReviewsError(viewModel: viewModel)
        } else {
            if response.overviewReviews != nil {
                let viewModel = DetailMovieModels.SelectOverviewReviewsSegmentedControl.ViewModel(overviewReviews: response.overviewReviews, errorMessage: nil)
                viewController?.displayOverviewReviews(viewModel: viewModel)
            } else { //todo need to make text bigger and centered
                let viewModel = DetailMovieModels.SelectOverviewReviewsSegmentedControl.ViewModel(overviewReviews: "Отзывов еще нет.", errorMessage: nil)
                viewController?.displayOverviewReviews(viewModel: viewModel)
            }
        }
    }
}

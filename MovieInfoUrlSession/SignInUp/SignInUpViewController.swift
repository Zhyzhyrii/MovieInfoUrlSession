//
//  SignInUpViewController.swift
//  MovieInfoUrlSession
//
//  Created by Игорь on 10/30/19.
//  Copyright (c) 2019 Igor Zhyzhyrii. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SignInUpDisplayLogic: class {
    func displaySignInUpButtonTitle(viewModel: SignInUpModels.SetSignInUpButtonTitle.ViewModel)
    func signInUpFailureWithNoAction(viewModel: SignInUpModels.SignInUp.ViewModel)
    func signInUpFailureWithAction(viewModel: SignInUpModels.SignInUp.ViewModel)
    func signInUpSuccessful(viewModel: SignInUpModels.SignInUp.ViewModel)
}

class SignInUpViewController: UIViewController, SignInUpDisplayLogic {
    
    @IBOutlet var sigInUpButton: UIButton!
    @IBOutlet var loginTextField: UITextField!
    @IBOutlet var passwordTextField: UITextField!
    
    var interactor: SignInUpBusinessLogic?
    var router: (NSObjectProtocol & SignInUpRoutingLogic & SignInUpDataPassing)?
    
    // MARK: Object lifecycle
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        SignInUpConfigurator.shared.configure(with: self)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        interactor?.setUpButonTitle()
        
        loginTextField.delegate = self
        passwordTextField.delegate = self
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    @IBAction func backButtonPressed() {
        dismiss(animated: true, completion: nil)
    }
    
    
    @IBAction func signInUpButtonPressed() {
        let request = SignInUpModels.SignInUp.Request(login: loginTextField.text, password: passwordTextField.text)
        interactor?.signInUp(request: request)
    }
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        super.touchesBegan(touches, with: event)
        view.endEditing(true)
    }
    
    // MARK: Display signIn or SignUp button title
    
    func displaySignInUpButtonTitle(viewModel: SignInUpModels.SetSignInUpButtonTitle.ViewModel) {
        sigInUpButton.setTitle(viewModel.title, for: .normal)
    }
    
    // MARK: Display signIn or SignUp button title
    
    func signInUpSuccessful(viewModel: SignInUpModels.SignInUp.ViewModel) {
        performSegue(withIdentifier: "ShowCategories", sender: nil)
    }
    
    func signInUpFailureWithNoAction(viewModel: SignInUpModels.SignInUp.ViewModel) {
        Helpers.showAlert(withTitle: viewModel.errorTitle, message: viewModel.errorMessage, viewController: self, buttonTitle: "Ок", handler: nil)
        
        loginTextField.text = ""
        passwordTextField.text = ""
    }
    
    func signInUpFailureWithAction(viewModel: SignInUpModels.SignInUp.ViewModel) {
        Helpers.showAlert(withTitle: viewModel.errorTitle, message: viewModel.errorMessage, viewController: self, buttonTitle: "Ok") { (_)
            in
            self.dismiss(animated: true, completion: nil)
        }
    }
}

extension SignInUpViewController: UITextFieldDelegate {
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        self.view.endEditing(true)
        return true
    }
    
}
